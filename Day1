1) Create a Sample Database:

	Query -> CREATE DATABASE studentdb;

   Then connect to it:

	Query -> \c studentdb


2) Create Tables:

    -> use a Student-Department example.

	Query for Department -> 

	CREATE TABLE department (
    	dept_id SERIAL PRIMARY KEY,
    	dept_name VARCHAR(50)
	);

	Query for Student ->

        CREATE TABLE student (
        student_id SERIAL PRIMARY KEY,
        name VARCHAR(100),
        age INT,
        dept_id INT REFERENCES department(dept_id)
        );

3) INSERT Data:

	-- Departments:
	
	Query ->

	INSERT INTO department (dept_name) VALUES 
	('Computer Science'), 
	('Mechanical'),
	('Information Technology'), 
	('Electrical');

	-- Students:

	Query ->

	INSERT INTO student (name, age, dept_id) VALUES 
	('Alice', 21, 1), 
	('Bob', 22, 2), 
	('Charlie', 20, 1), 
	('David', 23, 3);

4) SELECT:

	-- Simple SELECT:
	
	Query ->

	SELECT * FROM student;

	-- Simple SELECT:

	SELECT * FROM Departments;

	-- Join with department:

	Query ->

	SELECT s.name, s.age, d.dept_name
	FROM student s
	JOIN department d ON s.dept_id = d.dept_id;

5) UPDATE:
	
	-- Change Aliceâ€™s age:

	Query ->

	UPDATE student SET age = 22 WHERE name = 'Alice';

6) DELETE:

	 -- Remove student Bob:

	Query ->

	DELETE FROM student WHERE name = 'Bob';

7) SUBQUERIES:

	1) Get students from the department named "Computer Science":

	Query -> 

	SELECT * FROM student 
	WHERE dept_id = (
    	SELECT dept_id FROM department WHERE dept_name = 'Computer Science'
	);

	2) Get students older than the average age:

	Query ->
	
	SELECT * FROM student 
	WHERE age > (
    	SELECT AVG(age) FROM student
	);

	3) Sort by student_id (Ascending):

	Query ->

	SELECT * FROM student ORDER BY student_id ASC;

	4) Sort by Age (Descending):

	Query -> 

	SELECT * FROM student ORDER BY age DESC;

	5) Find students from the department named 'Mechanical':

	Query -> 

	SELECT * FROM student 
	WHERE dept_id = (
    	SELECT dept_id FROM department WHERE dept_name = 'Mechanical'
	);

	6) Drop Table:

	Query -> DROP TABLE student;
